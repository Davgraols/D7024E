// Code generated by protoc-gen-go. DO NOT EDIT.
// source: RPC.proto

package d7024e

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RPC_NodeType int32

const (
	RPC_OWNER RPC_NodeType = 0
	RPC_NODE  RPC_NodeType = 1
)

var RPC_NodeType_name = map[int32]string{
	0: "OWNER",
	1: "NODE",
}

var RPC_NodeType_value = map[string]int32{
	"OWNER": 0,
	"NODE":  1,
}

func (x RPC_NodeType) String() string {
	return proto.EnumName(RPC_NodeType_name, int32(x))
}

func (RPC_NodeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_438fa73ead152342, []int{0, 0}
}

type RPC_RPCType int32

const (
	RPC_PING_REQ       RPC_RPCType = 0
	RPC_PING_RES       RPC_RPCType = 1
	RPC_STORE_REQ      RPC_RPCType = 2
	RPC_STORE_RES      RPC_RPCType = 3
	RPC_FIND_NODE_REQ  RPC_RPCType = 4
	RPC_FIND_NODE_RES  RPC_RPCType = 5
	RPC_FIND_VALUE_REQ RPC_RPCType = 6
	RPC_FIND_VALUE_RES RPC_RPCType = 7
)

var RPC_RPCType_name = map[int32]string{
	0: "PING_REQ",
	1: "PING_RES",
	2: "STORE_REQ",
	3: "STORE_RES",
	4: "FIND_NODE_REQ",
	5: "FIND_NODE_RES",
	6: "FIND_VALUE_REQ",
	7: "FIND_VALUE_RES",
}

var RPC_RPCType_value = map[string]int32{
	"PING_REQ":       0,
	"PING_RES":       1,
	"STORE_REQ":      2,
	"STORE_RES":      3,
	"FIND_NODE_REQ":  4,
	"FIND_NODE_RES":  5,
	"FIND_VALUE_REQ": 6,
	"FIND_VALUE_RES": 7,
}

func (x RPC_RPCType) String() string {
	return proto.EnumName(RPC_RPCType_name, int32(x))
}

func (RPC_RPCType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_438fa73ead152342, []int{0, 1}
}

type RPC struct {
	RpcType              RPC_RPCType    `protobuf:"varint,1,opt,name=rpc_type,json=rpcType,proto3,enum=main.RPC_RPCType" json:"rpc_type,omitempty"`
	Ser                  []byte         `protobuf:"bytes,2,opt,name=ser,proto3" json:"ser,omitempty"`
	SenderId             []byte         `protobuf:"bytes,3,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	Value                []byte         `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	NodeType             RPC_NodeType   `protobuf:"varint,5,opt,name=node_type,json=nodeType,proto3,enum=main.RPC_NodeType" json:"node_type,omitempty"`
	LookupId             []byte         `protobuf:"bytes,6,opt,name=lookup_id,json=lookupId,proto3" json:"lookup_id,omitempty"`
	SenderIp             string         `protobuf:"bytes,7,opt,name=sender_ip,json=senderIp,proto3" json:"sender_ip,omitempty"`
	Klist                []*RPCKnearest `protobuf:"bytes,8,rep,name=klist,proto3" json:"klist,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RPC) Reset()         { *m = RPC{} }
func (m *RPC) String() string { return proto.CompactTextString(m) }
func (*RPC) ProtoMessage()    {}
func (*RPC) Descriptor() ([]byte, []int) {
	return fileDescriptor_438fa73ead152342, []int{0}
}

func (m *RPC) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPC.Unmarshal(m, b)
}
func (m *RPC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPC.Marshal(b, m, deterministic)
}
func (m *RPC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPC.Merge(m, src)
}
func (m *RPC) XXX_Size() int {
	return xxx_messageInfo_RPC.Size(m)
}
func (m *RPC) XXX_DiscardUnknown() {
	xxx_messageInfo_RPC.DiscardUnknown(m)
}

var xxx_messageInfo_RPC proto.InternalMessageInfo

func (m *RPC) GetRpcType() RPC_RPCType {
	if m != nil {
		return m.RpcType
	}
	return RPC_PING_REQ
}

func (m *RPC) GetSer() []byte {
	if m != nil {
		return m.Ser
	}
	return nil
}

func (m *RPC) GetSenderId() []byte {
	if m != nil {
		return m.SenderId
	}
	return nil
}

func (m *RPC) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *RPC) GetNodeType() RPC_NodeType {
	if m != nil {
		return m.NodeType
	}
	return RPC_OWNER
}

func (m *RPC) GetLookupId() []byte {
	if m != nil {
		return m.LookupId
	}
	return nil
}

func (m *RPC) GetSenderIp() string {
	if m != nil {
		return m.SenderIp
	}
	return ""
}

func (m *RPC) GetKlist() []*RPCKnearest {
	if m != nil {
		return m.Klist
	}
	return nil
}

type RPCKnearest struct {
	Id                   []byte   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ip                   []byte   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RPCKnearest) Reset()         { *m = RPCKnearest{} }
func (m *RPCKnearest) String() string { return proto.CompactTextString(m) }
func (*RPCKnearest) ProtoMessage()    {}
func (*RPCKnearest) Descriptor() ([]byte, []int) {
	return fileDescriptor_438fa73ead152342, []int{0, 0}
}

func (m *RPCKnearest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPCKnearest.Unmarshal(m, b)
}
func (m *RPCKnearest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPCKnearest.Marshal(b, m, deterministic)
}
func (m *RPCKnearest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCKnearest.Merge(m, src)
}
func (m *RPCKnearest) XXX_Size() int {
	return xxx_messageInfo_RPCKnearest.Size(m)
}
func (m *RPCKnearest) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCKnearest.DiscardUnknown(m)
}

var xxx_messageInfo_RPCKnearest proto.InternalMessageInfo

func (m *RPCKnearest) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RPCKnearest) GetIp() []byte {
	if m != nil {
		return m.Ip
	}
	return nil
}

func init() {
	proto.RegisterType((*RPC)(nil), "main.RPC")
	proto.RegisterType((*RPCKnearest)(nil), "main.RPC.knearest")
	proto.RegisterEnum("main.RPC_NodeType", RPC_NodeType_name, RPC_NodeType_value)
	proto.RegisterEnum("main.RPC_RPCType", RPC_RPCType_name, RPC_RPCType_value)
}

func init() { proto.RegisterFile("RPC.proto", fileDescriptor_438fa73ead152342) }

var fileDescriptor_438fa73ead152342 = []byte{
	// 342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xcf, 0x4e, 0x83, 0x40,
	0x10, 0xc6, 0xcb, 0xbf, 0xb2, 0x8c, 0x6d, 0xb3, 0x9d, 0x78, 0x20, 0x7a, 0x90, 0xf4, 0x44, 0x8c,
	0xa9, 0x89, 0x3e, 0x81, 0x69, 0xd1, 0x90, 0x18, 0x8a, 0x4b, 0xd5, 0x23, 0xa9, 0xdd, 0x3d, 0x90,
	0x56, 0xd8, 0x00, 0x35, 0xe9, 0x63, 0xf8, 0xa2, 0x3e, 0x83, 0x61, 0x69, 0x95, 0xe8, 0x6d, 0xbe,
	0x6f, 0xbe, 0xdd, 0xdf, 0xec, 0x2c, 0x38, 0x2c, 0x9e, 0x4d, 0x65, 0x59, 0xd4, 0x05, 0x9a, 0xef,
	0xab, 0x2c, 0x9f, 0x7c, 0x19, 0x60, 0xb0, 0x78, 0x86, 0x57, 0x40, 0x4a, 0xb9, 0x4e, 0xeb, 0xbd,
	0x14, 0xae, 0xe6, 0x69, 0xfe, 0xe8, 0x66, 0x3c, 0x6d, 0x02, 0xd3, 0xe6, 0x00, 0x8b, 0x67, 0xcb,
	0xbd, 0x14, 0xcc, 0x2e, 0xe5, 0xba, 0x29, 0x90, 0x82, 0x51, 0x89, 0xd2, 0xd5, 0x3d, 0xcd, 0x1f,
	0xb0, 0xa6, 0xc4, 0x73, 0x70, 0x2a, 0x91, 0x73, 0x51, 0xa6, 0x19, 0x77, 0x0d, 0xe5, 0x93, 0xd6,
	0x08, 0x39, 0x9e, 0x82, 0xf5, 0xb1, 0xda, 0xee, 0x84, 0x6b, 0xaa, 0x46, 0x2b, 0xf0, 0x1a, 0x9c,
	0xbc, 0xe0, 0xa2, 0x65, 0x5a, 0x8a, 0x89, 0xbf, 0xcc, 0xa8, 0xe0, 0x42, 0x41, 0x49, 0x7e, 0xa8,
	0x1a, 0xc6, 0xb6, 0x28, 0x36, 0x3b, 0xd9, 0x30, 0xfa, 0x2d, 0xa3, 0x35, 0x42, 0xde, 0x1d, 0x40,
	0xba, 0xb6, 0xa7, 0xf9, 0xce, 0xcf, 0x00, 0x12, 0x7d, 0xb0, 0x36, 0xdb, 0xac, 0xaa, 0x5d, 0xe2,
	0x19, 0xfe, 0x49, 0x17, 0xb3, 0xc9, 0xc5, 0xaa, 0x14, 0x55, 0xcd, 0xda, 0xc0, 0xd9, 0x25, 0x90,
	0xa3, 0x85, 0x23, 0xd0, 0x33, 0xae, 0xb6, 0x31, 0x60, 0x7a, 0xc6, 0x95, 0x96, 0x87, 0x47, 0xeb,
	0x99, 0x9c, 0x5c, 0x00, 0x39, 0x4e, 0x89, 0x0e, 0x58, 0x8b, 0xd7, 0x28, 0x60, 0xb4, 0x87, 0x04,
	0xcc, 0x68, 0x31, 0x0f, 0xa8, 0x36, 0xf9, 0xd4, 0xc0, 0x3e, 0xec, 0x0e, 0x07, 0x40, 0xe2, 0x30,
	0x7a, 0x48, 0x59, 0xf0, 0x44, 0x7b, 0x1d, 0x95, 0x50, 0x0d, 0x87, 0xe0, 0x24, 0xcb, 0x05, 0x0b,
	0x54, 0x53, 0xef, 0xca, 0x84, 0x1a, 0x38, 0x86, 0xe1, 0x7d, 0x18, 0xcd, 0xd3, 0xe6, 0x52, 0x95,
	0x30, 0xff, 0x5a, 0x09, 0xb5, 0x10, 0x61, 0xa4, 0xac, 0x97, 0xbb, 0xc7, 0xe7, 0x36, 0xd6, 0xff,
	0xe7, 0x25, 0xd4, 0x7e, 0xeb, 0xab, 0xdf, 0xbf, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x70, 0x98,
	0x41, 0xf3, 0x0a, 0x02, 0x00, 0x00,
}
